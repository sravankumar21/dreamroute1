[
    {
      "question": "What is Object-Oriented Programming (OOP)?",
      "answer": "OOP is a programming paradigm based on the concept of objects, which can contain data (attributes) and methods (functions). It emphasizes reusability, scalability, and modularity in code."
    },
    {
      "question": "What is a class?",
      "answer": "A class is a blueprint for creating objects. It defines attributes (data) and methods (functions) that the objects created from the class will have."
    },
    {
      "question": "What is an object?",
      "answer": "An object is an instance of a class. It holds the data and functions defined in the class."
    },
    {
      "question": "What is encapsulation?",
      "answer": "Encapsulation is the concept of bundling data and methods that operate on the data within a class and restricting access to them from outside the class. This ensures data security and hides complexity."
    },
    {
      "question": "What is inheritance?",
      "answer": "Inheritance is the mechanism by which one class (child class) inherits properties and behaviors (methods) from another class (parent class), allowing code reuse and a hierarchical relationship."
    },
    {
      "question": "What is polymorphism?",
      "answer": "Polymorphism allows objects of different classes to be treated as objects of a common superclass. It also enables a single function or method to work in different ways depending on the context (overriding/overloading)."
    },
    {
      "question": "What is abstraction?",
      "answer": "Abstraction is the concept of hiding complex implementation details and showing only the necessary functionality to the user. It simplifies the interaction with objects by exposing only relevant information."
    },
    {
      "question": "What is method overloading?",
      "answer": "Method overloading allows a class to have multiple methods with the same name but different parameters, enabling the methods to perform different tasks based on the input."
    },
    {
      "question": "What is method overriding?",
      "answer": "Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its parent class. It modifies the behavior of the inherited method."
    },
    {
      "question": "What is a constructor?",
      "answer": "A constructor is a special method in a class that is automatically called when an object is created. It is used to initialize the object's attributes."
    },
    {
      "question": "What is the difference between abstraction and encapsulation?",
      "answer": "Abstraction focuses on hiding the internal details and showing only the essential features, while encapsulation focuses on bundling the data and methods together and restricting access to maintain control and security."
    },
    {
      "question": "What is the 'this' keyword?",
      "answer": "'this' refers to the current instance of the class in which it is used. It is typically used to differentiate between instance variables and parameters or to invoke other methods of the same object."
    },
    {
      "question": "What is dynamic binding?",
      "answer": "Dynamic binding, also known as late binding, refers to the process where the method to be invoked is determined at runtime, commonly used in polymorphism and method overriding."
    },
    {
      "question": "What is static binding?",
      "answer": "Static binding, or early binding, refers to the process where the method to be invoked is determined at compile time. It is typically used in method overloading."
    }
  ]